import numpy as np
import matplotlib.pyplot as plt

# Constantes
mu_0 = 4 * np.pi * 1e-7  # Permeabilidad magnética del vacío (H/m)
q_m = 1e-6  # Carga magnética teórica del monopolo (en unidades arbitrarias)
R_bobina = 0.05  # Radio de las bobinas (m)
N = 100  # Número de espiras por bobina
R_resistencia = 1.0  # Resistencia de las bobinas (ohm)
D = 0.1  # Distancia entre las dos bobinas (m)

# Configuración del tiempo
t_final = 5.0  # Tiempo total de la simulación (s)
dt = 1e-4  # Paso de tiempo (s)
t = np.arange(0, t_final, dt)  # Vector de tiempo

# Posición inicial y final del monopolo 1
x_start1 = -0.1  # Posición inicial del primer monopolo en el eje x (m)
x_end1 = 0.1  # Posición final del primer monopolo en el eje x (m)
v1 = (x_end1 - x_start1) / t_final  # Velocidad del primer monopolo
x_m1 = x_start1 + v1 * t  # Posición del primer monopolo en el tiempo

# Posición inicial y final del monopolo 2
x_start2 = D - 0.1  # Posición inicial del segundo monopolo cerca de la segunda bobina (m)
x_end2 = D + 0.1  # Posición final del segundo monopolo (m)
v2 = (x_end2 - x_start2) / t_final  # Velocidad del segundo monopolo
x_m2 = x_start2 + v2 * t  # Posición del segundo monopolo en el tiempo

# Función para calcular el flujo magnético
# Aproximación: flujo a través de un área circular centrada en el monopolo
def flujo_magnetico(x_m, x_bobina, R_bobina, N):
    # Campo magnético en el centro de cada espira
    B = mu_0 * q_m / (4 * np.pi * ((x_m - x_bobina)**2 + R_bobina**2)**1.5)
    # Área de cada espira
    A = np.pi * R_bobina**2
    # Flujo total
    return N * B * A

# Calcular el flujo magnético en las dos bobinas debido al primer monopolo
phi_B1_m1 = flujo_magnetico(x_m1, 0, R_bobina, N)  # Bobina 1 por el primer monopolo
phi_B2_m1 = flujo_magnetico(x_m1, D, R_bobina, N)  # Bobina 2 por el primer monopolo

# Calcular el flujo magnético en la segunda bobina debido al segundo monopolo
phi_B2_m2 = flujo_magnetico(x_m2, D, R_bobina, N)  # Bobina 2 por el segundo monopolo

# Flujo magnético total en las bobinas
phi_B1 = phi_B1_m1  # Solo el primer monopolo afecta la bobina 1
phi_B2 = phi_B2_m1 + phi_B2_m2  # Ambos monopolos afectan la bobina 2

# Calcular la fem inducida en cada bobina
fem1 = -np.gradient(phi_B1, dt)  # Ley de Faraday para la bobina 1
fem2 = -np.gradient(phi_B2, dt)  # Ley de Faraday para la bobina 2

# Calcular la corriente inducida en cada bobina
corriente1 = fem1 / R_resistencia
corriente2 = fem2 / R_resistencia

# Graficar resultados
plt.figure(figsize=(12, 10))

# Flujo magnético
plt.subplot(3, 1, 1)
plt.plot(t, phi_B1, label='Flujo magnético Bobina 1 ($\Phi_{B1}$)', color='blue')
plt.plot(t, phi_B2, label='Flujo magnético Bobina 2 ($\Phi_{B2}$)', color='red')
plt.xlabel('Tiempo (s)')
plt.ylabel('Flujo magnético (Wb)')
plt.grid()
plt.legend()

# FEM inducida
plt.subplot(3, 1, 2)
plt.plot(t, fem1, label='FEM inducida Bobina 1 ($\mathcal{E}_1$)', color='orange')
plt.plot(t, fem2, label='FEM inducida Bobina 2 ($\mathcal{E}_2$)', color='purple')
plt.xlabel('Tiempo (s)')
plt.ylabel('FEM (V)')
plt.grid()
plt.legend()

# Corriente inducida
plt.subplot(3, 1, 3)
plt.plot(t, corriente1, label='Corriente inducida Bobina 1 ($I_1$)', color='green')
plt.plot(t, corriente2, label='Corriente inducida Bobina 2 ($I_2$)', color='brown')
plt.xlabel('Tiempo (s)')
plt.ylabel('Corriente (A)')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
